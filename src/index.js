const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
const fs = require("fs");
require("dotenv").config();

// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const HUGGINGFACE_API_KEY = process.env.HUGGINGFACE_API_KEY;
const MS_24B_I_2501 = process.env.MS_24B_I_2501;

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
const chatData = {};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const messageText =
    msg.forward_from_chat?.type === "channel" ? msg.caption : msg.text;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞
  if (!chatData[chatId]) {
    chatData[chatId] = {
      posts: [],
      isCollecting: false,
    };
  }

  try {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    if (messageText === "/start") {
      await bot.sendMessage(
        chatId,
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
      );
    }
    // –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤
    else if (messageText === "/start_collecting") {
      chatData[chatId].isCollecting = true;
      chatData[chatId].posts = [];
      console.log("–ù–∞—á–∞—Ç —Å–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤..");
      await bot.sendMessage(
        chatId,
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–æ—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–±–æ—Ä'",
        {
          reply_markup: {
            keyboard: [["‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"]],
            resize_keyboard: true,
          },
        }
      );
    }
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –ø–æ—Å—Ç–æ–≤
    else if (messageText === "‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏") {
      await finishCollection(chatId);
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Å–±–æ—Ä–∞
    else if (chatData[chatId].isCollecting && msg.forward_from_chat) {
      await processPost(chatId, msg);
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    else if (messageText && !chatData[chatId].isCollecting) {
      await processSingleMessage(chatId, msg);
    }
  } catch (error) {
    console.error(error);
    bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
async function processPost(chatId, msg) {
  const postData = {
    text: cleanText(msg.caption || ""),
    image: [],
    links: [],
  };

  // –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const photoResult = await searchPhoto(msg);
  if (photoResult) {
    postData.image.push(photoResult);
  }

  // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫
  const linksResult = await searchLinks(msg);
  if (linksResult) postData.links.push(...linksResult);

  chatData[chatId].posts.push(postData);
  await bot.sendMessage(chatId, "–ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function processSingleMessage(chatId, msg) {
  const formattedText = cleanText(msg.text || msg.caption || "");
  let photoPath = "";
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  await bot.sendMessage(chatId, "–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \n" + formattedText);

  // –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (msg.photo) {
    photoPath = await bot.downloadFile(
      msg.photo[msg.photo.length - 1].file_id,
      "./images"
    );
  }

  // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫
  const linksResult = await searchLinks(msg);
  if (linksResult && linksResult.length > 0) {
    const linksText = linksResult
      .map(
        (link) => `–§—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞: ${link.context}\n\t  |‚Üí –°—Å—ã–ª–∫–∞: ${link.url}`
      )
      .join("\n");
    await bot.sendMessage(chatId, `üîó –°—Å—ã–ª–∫–∏ –∏–∑ –ø–æ—Å—Ç–∞:\n${linksText}`, {
      disable_web_page_preview: true,
    });
  } else {
    await bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏.");
  }

  //–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (photoPath) {
    await bot.sendPhoto(chatId, photoPath);
  } else {
    await bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
  }

  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  fs.unlink(photoPath, (error) => {
    if (error) console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
  });
  console.log("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —É–¥–∞–ª–µ–Ω—ã");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞ –ø–æ—Å—Ç–æ–≤
async function finishCollection(chatId) {
  chatData[chatId].isCollecting = false;

  if (chatData[chatId].posts.length === 0) {
    await bot.sendMessage(chatId, "–ù–µ –±—ã–ª–æ —Å–æ–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞", {
      reply_markup: {
        remove_keyboard: true,
      },
    });
    return;
  }

  await bot.sendMessage(chatId, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. \n–†–µ–∑—É–ª—å—Ç–∞—Ç:", {
    reply_markup: {
      remove_keyboard: true,
    },
  });

  let postsTextData = "";
  let linksData = "";
  let photoPath = [];

  // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∏ —Å—Å—ã–ª–∫–∏
  for (let i = 0; i < chatData[chatId].posts.length; i++) {
    const post = chatData[chatId].posts[i];
    postsTextData += `–¢–µ–∫—Å—Ç #${i + 1}: \n${post.text}\n`;

    if (post.links.length > 0) {
      linksData += `üîó –°—Å—ã–ª–∫–∏ –∏–∑ –ø–æ—Å—Ç–∞ #${i + 1}:\n`;
      post.links.forEach((link) => {
        linksData += `–§—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞: ${link.context}\n\t  |‚Üí –°—Å—ã–ª–∫–∞: ${link.url}\n`;
      });
    } else {
      linksData += `üîó –í –ø–æ—Å—Ç–µ #${i + 1} —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n`;
    }

    photoPath.push(...post.image);
  }

  await bot.sendMessage(chatId, postsTextData);
  await bot.sendMessage(chatId, linksData, { disable_web_page_preview: true });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  await sendGroupImage(chatId, photoPath);

  // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  chatData[chatId].posts = [];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function sendGroupImage(chatId, photoPath) {
  try {
    const media = [];

    photoPath.forEach((image) =>
      media.push({
        type: "photo",
        media: image,
      })
    );

    await bot.sendMediaGroup(chatId, media);

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    media.forEach((file) => {
      fs.unlink(file.media, (error) => {
        if (error) console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
      });
    });
    console.log("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —É–¥–∞–ª–µ–Ω—ã");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞:", error);
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞.");
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
function cleanText(text) {
  return text.replace(
    /([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDE4F]|\uD83D[\uDE80-\uDEFF]|\uD83E[\uDD10-\uDDFF]|\n)/g,
    ""
  );
}

// –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function searchPhoto(msg) {
  if (!msg.photo) return null;

  const photoPath = await bot.downloadFile(
    msg.photo[msg.photo.length - 1].file_id,
    "./images"
  );
  return photoPath;
}

// –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫
async function searchLinks(msg) {
  if (!msg.caption_entities) return null;

  const links = [];
  msg.caption_entities.forEach((entity) => {
    if (entity.type === "text_link") {
      const fragmentText = msg.caption.substr(entity.offset, entity.length);
      links.push({ url: entity.url, context: `"${fragmentText}"` });
    }
  });

  return links.length > 0 ? links : null;
}
